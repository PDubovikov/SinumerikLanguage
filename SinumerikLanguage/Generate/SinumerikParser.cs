//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Petr/IdeaProjects/SimpleParser/src\Sinumerik.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SinumerikParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, Println=17, 
		Print=18, Input=19, Assert=20, Size=21, Sin=22, ASin=23, Cos=24, ACos=25, 
		Tan=26, ATan=27, ATan2=28, Abs=29, Sqrt=30, Trunc=31, Pot=32, Mod=33, 
		Div=34, Round=35, Def=36, Proc=37, If=38, EndIf=39, Else=40, Return=41, 
		Mcall=42, For=43, EndFor=44, While=45, EndWhile=46, GotoB=47, GotoF=48, 
		Goto=49, Trans=50, Atrans=51, Rot=52, Arot=53, Mirror=54, Amirror=55, 
		Scale=56, AScale=57, Diamon=58, Diamof=59, Diam90=60, Oriwks=61, Oriaxes=62, 
		Traori=63, Turn=64, Msg=65, Setal=66, Sblof=67, Sblon=68, Save=69, Ax=70, 
		Axis1=71, Axis2=72, Axis3=73, Axis4=74, Axis5=75, Axis6=76, Displof=77, 
		Displon=78, Stopre=79, To=80, End=81, SubProg=82, Null=83, MFunc=84, FFunc=85, 
		SFunc=86, TFunc=87, DFunc=88, Nnumb=89, Xaxis=90, Yaxis=91, Zaxis=92, 
		Aaxis=93, Baxis=94, Caxis=95, Uaxis=96, Vaxis=97, Waxis=98, Ivect=99, 
		Jvect=100, Kvect=101, ModeAC=102, ModeIC=103, Radius=104, Or=105, And=106, 
		Equals=107, NEquals=108, GTEquals=109, LTEquals=110, Pow=111, Excl=112, 
		GT=113, LT=114, Add=115, Subtract=116, Multiply=117, Divide=118, Modulus=119, 
		OBrace=120, CBrace=121, OBracket=122, CBracket=123, OParen=124, CParen=125, 
		Assign=126, Comma=127, QMark=128, Colon=129, Bool=130, Number=131, GCodeText=132, 
		Identifier=133, Labelstart=134, Mcodes=135, String=136, Comment=137, WHITESPACE=138, 
		CR=139;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_statement = 2, RULE_assignment = 3, 
		RULE_vardefinition = 4, RULE_functionCall = 5, RULE_ifStatement = 6, RULE_ifStat = 7, 
		RULE_ifGotostat = 8, RULE_elseStat = 9, RULE_functionDecl = 10, RULE_forStatement = 11, 
		RULE_whileStatement = 12, RULE_mcallStatement = 13, RULE_gotoStatement = 14, 
		RULE_returnStatement = 15, RULE_idList = 16, RULE_exprList = 17, RULE_expression = 18, 
		RULE_gcodeStatement = 19, RULE_list = 20, RULE_varlist = 21, RULE_typeDef = 22, 
		RULE_indexes = 23, RULE_printvar = 24, RULE_metkaStart = 25, RULE_metkaDest = 26, 
		RULE_crlfStatement = 27;
	public static readonly string[] ruleNames = {
		"parse", "block", "statement", "assignment", "vardefinition", "functionCall", 
		"ifStatement", "ifStat", "ifGotostat", "elseStat", "functionDecl", "forStatement", 
		"whileStatement", "mcallStatement", "gotoStatement", "returnStatement", 
		"idList", "exprList", "expression", "gcodeStatement", "list", "varlist", 
		"typeDef", "indexes", "printvar", "metkaStart", "metkaDest", "crlfStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'NOT'", "'INT'", "'int'", "'STRING'", "'string'", "'REAL'", "'real'", 
		"'BOOL'", "'bool'", "'CHAR'", "'char'", "'AXIS'", "'axis'", "'FRAME'", 
		"'frame'", "'<<'", "'println'", "'print'", "'input'", "'assert'", "'size'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "'$P_AXN1'", "'$P_AXN2'", "'$P_AXN3'", "'$P_AXN4'", "'$P_AXN5'", 
		"'$P_AXN6'", null, null, null, null, "'end'", null, "'null'", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'=='", "'<>'", 
		"'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'{'", "'}'", "'['", "']'", "'('", "')'", "'='", "','", "'?'", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "Println", "Print", "Input", "Assert", "Size", 
		"Sin", "ASin", "Cos", "ACos", "Tan", "ATan", "ATan2", "Abs", "Sqrt", "Trunc", 
		"Pot", "Mod", "Div", "Round", "Def", "Proc", "If", "EndIf", "Else", "Return", 
		"Mcall", "For", "EndFor", "While", "EndWhile", "GotoB", "GotoF", "Goto", 
		"Trans", "Atrans", "Rot", "Arot", "Mirror", "Amirror", "Scale", "AScale", 
		"Diamon", "Diamof", "Diam90", "Oriwks", "Oriaxes", "Traori", "Turn", "Msg", 
		"Setal", "Sblof", "Sblon", "Save", "Ax", "Axis1", "Axis2", "Axis3", "Axis4", 
		"Axis5", "Axis6", "Displof", "Displon", "Stopre", "To", "End", "SubProg", 
		"Null", "MFunc", "FFunc", "SFunc", "TFunc", "DFunc", "Nnumb", "Xaxis", 
		"Yaxis", "Zaxis", "Aaxis", "Baxis", "Caxis", "Uaxis", "Vaxis", "Waxis", 
		"Ivect", "Jvect", "Kvect", "ModeAC", "ModeIC", "Radius", "Or", "And", 
		"Equals", "NEquals", "GTEquals", "LTEquals", "Pow", "Excl", "GT", "LT", 
		"Add", "Subtract", "Multiply", "Divide", "Modulus", "OBrace", "CBrace", 
		"OBracket", "CBracket", "OParen", "CParen", "Assign", "Comma", "QMark", 
		"Colon", "Bool", "Number", "GCodeText", "Identifier", "Labelstart", "Mcodes", 
		"String", "Comment", "WHITESPACE", "CR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sinumerik.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SinumerikParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SinumerikParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SinumerikParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SinumerikParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; block();
			State = 57; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 61;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Println:
					case Sin:
					case ASin:
					case Cos:
					case ACos:
					case Tan:
					case ATan:
					case ATan2:
					case Abs:
					case Sqrt:
					case Trunc:
					case Pot:
					case Round:
					case Def:
					case If:
					case Return:
					case Mcall:
					case For:
					case While:
					case GotoB:
					case GotoF:
					case Goto:
					case Trans:
					case Atrans:
					case Rot:
					case Arot:
					case Mirror:
					case Amirror:
					case Scale:
					case AScale:
					case Diamon:
					case Diamof:
					case Diam90:
					case Oriwks:
					case Oriaxes:
					case Traori:
					case Turn:
					case Msg:
					case Setal:
					case Sblof:
					case Sblon:
					case Save:
					case Ax:
					case Axis1:
					case Axis2:
					case Axis3:
					case Axis4:
					case Axis5:
					case Axis6:
					case Displof:
					case Displon:
					case Stopre:
					case SubProg:
					case MFunc:
					case FFunc:
					case SFunc:
					case TFunc:
					case DFunc:
					case Xaxis:
					case Yaxis:
					case Zaxis:
					case Aaxis:
					case Baxis:
					case Caxis:
					case Uaxis:
					case Vaxis:
					case Waxis:
					case Ivect:
					case Jvect:
					case Kvect:
					case ModeAC:
					case ModeIC:
					case Radius:
					case GCodeText:
					case Identifier:
					case Labelstart:
					case CR:
						{
						State = 59; statement();
						}
						break;
					case Proc:
						{
						State = 60; functionDecl();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public VardefinitionContext vardefinition() {
			return GetRuleContext<VardefinitionContext>(0);
		}
		public GcodeStatementContext gcodeStatement() {
			return GetRuleContext<GcodeStatementContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public McallStatementContext mcallStatement() {
			return GetRuleContext<McallStatementContext>(0);
		}
		public IfGotostatContext ifGotostat() {
			return GetRuleContext<IfGotostatContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public MetkaStartContext metkaStart() {
			return GetRuleContext<MetkaStartContext>(0);
		}
		public CrlfStatementContext crlfStatement() {
			return GetRuleContext<CrlfStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; vardefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; gcodeStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69; functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70; ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71; forStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72; whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 73; mcallStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 74; ifGotostat();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 75; gotoStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 76; metkaStart();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 77; crlfStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 78; returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(Identifier);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OBracket) {
				{
				State = 82; indexes();
				}
			}

			State = 85; Match(Assign);
			State = 86; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VardefinitionContext : ParserRuleContext {
		public ITerminalNode Def() { return GetToken(SinumerikParser.Def, 0); }
		public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		public VarlistContext[] varlist() {
			return GetRuleContexts<VarlistContext>();
		}
		public VarlistContext varlist(int i) {
			return GetRuleContext<VarlistContext>(i);
		}
		public VardefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vardefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterVardefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitVardefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VardefinitionContext vardefinition() {
		VardefinitionContext _localctx = new VardefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_vardefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; Match(Def);
			State = 89; typeDef();
			State = 91;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 90; varlist();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MsgFunctionCallContext : FunctionCallContext {
		public ITerminalNode Msg() { return GetToken(SinumerikParser.Msg, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public PrintvarContext printvar() {
			return GetRuleContext<PrintvarContext>(0);
		}
		public MsgFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMsgFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMsgFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMsgFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AaxisNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Axis4() { return GetToken(SinumerikParser.Axis4, 0); }
		public AaxisNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAaxisNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAaxisNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAaxisNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Zaxis() { return GetToken(SinumerikParser.Zaxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ZcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterZcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitZcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsinFunctionCallContext : FunctionCallContext {
		public ITerminalNode ASin() { return GetToken(SinumerikParser.ASin, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public AsinFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAsinFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAsinFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsinFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScaleFunctionCallContext : FunctionCallContext {
		public ITerminalNode Scale() { return GetToken(SinumerikParser.Scale, 0); }
		public ScaleFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterScaleFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitScaleFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScaleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierFunctionCallContext : FunctionCallContext {
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public IdentifierFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIdentifierFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIdentifierFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TraoriFunctionCallContext : FunctionCallContext {
		public ITerminalNode Traori() { return GetToken(SinumerikParser.Traori, 0); }
		public TraoriFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterTraoriFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitTraoriFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTraoriFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MmodeFunctionCallContext : FunctionCallContext {
		public ITerminalNode MFunc() { return GetToken(SinumerikParser.MFunc, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ITerminalNode Number() { return GetToken(SinumerikParser.Number, 0); }
		public MmodeFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMmodeFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMmodeFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMmodeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MirrorFunctionCallContext : FunctionCallContext {
		public ITerminalNode Mirror() { return GetToken(SinumerikParser.Mirror, 0); }
		public MirrorFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMirrorFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMirrorFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMirrorFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OriwksFunctionCallContext : FunctionCallContext {
		public ITerminalNode Oriwks() { return GetToken(SinumerikParser.Oriwks, 0); }
		public OriwksFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterOriwksFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitOriwksFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriwksFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiamofFunctionCallContext : FunctionCallContext {
		public ITerminalNode Diamof() { return GetToken(SinumerikParser.Diamof, 0); }
		public DiamofFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterDiamofFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitDiamofFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiamofFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FeedFunctionCallContext : FunctionCallContext {
		public ITerminalNode FFunc() { return GetToken(SinumerikParser.FFunc, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FeedFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterFeedFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitFeedFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeedFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atan2FunctionCallContext : FunctionCallContext {
		public ITerminalNode ATan2() { return GetToken(SinumerikParser.ATan2, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Comma() { return GetToken(SinumerikParser.Comma, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public Atan2FunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAtan2FunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAtan2FunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtan2FunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtanFunctionCallContext : FunctionCallContext {
		public ITerminalNode ATan() { return GetToken(SinumerikParser.ATan, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public AtanFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAtanFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAtanFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtanFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtFunctionCallContext : FunctionCallContext {
		public ITerminalNode Sqrt() { return GetToken(SinumerikParser.Sqrt, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public SqrtFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSqrtFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSqrtFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RotFunctionCallContext : FunctionCallContext {
		public ITerminalNode Rot() { return GetToken(SinumerikParser.Rot, 0); }
		public RotFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterRotFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitRotFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRotFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ZaxisNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Axis3() { return GetToken(SinumerikParser.Axis3, 0); }
		public ZaxisNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterZaxisNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitZaxisNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZaxisNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OriaxesFunctionCallContext : FunctionCallContext {
		public ITerminalNode Oriaxes() { return GetToken(SinumerikParser.Oriaxes, 0); }
		public OriaxesFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterOriaxesFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitOriaxesFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriaxesFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AcosFunctionCallContext : FunctionCallContext {
		public ITerminalNode ACos() { return GetToken(SinumerikParser.ACos, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public AcosFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAcosFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAcosFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcosFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SaveFunctionCallContext : FunctionCallContext {
		public ITerminalNode Save() { return GetToken(SinumerikParser.Save, 0); }
		public SaveFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSaveFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSaveFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpeedFunctionCallContext : FunctionCallContext {
		public ITerminalNode SFunc() { return GetToken(SinumerikParser.SFunc, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SpeedFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSpeedFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSpeedFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpeedFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintlnFunctionCallContext : FunctionCallContext {
		public ITerminalNode Println() { return GetToken(SinumerikParser.Println, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintlnFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterPrintlnFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitPrintlnFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintlnFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Yaxis() { return GetToken(SinumerikParser.Yaxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterYcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitYcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JvectFunctionCallContext : FunctionCallContext {
		public ITerminalNode Jvect() { return GetToken(SinumerikParser.Jvect, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JvectFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterJvectFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitJvectFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJvectFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YaxisNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Axis2() { return GetToken(SinumerikParser.Axis2, 0); }
		public YaxisNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterYaxisNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitYaxisNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYaxisNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RadiusFunctionCallContext : FunctionCallContext {
		public ITerminalNode Radius() { return GetToken(SinumerikParser.Radius, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RadiusFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterRadiusFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitRadiusFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRadiusFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToolNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode TFunc() { return GetToken(SinumerikParser.TFunc, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ITerminalNode String() { return GetToken(SinumerikParser.String, 0); }
		public ToolNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterToolNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitToolNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToolNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Baxis() { return GetToken(SinumerikParser.Baxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterBcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitBcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Vaxis() { return GetToken(SinumerikParser.Vaxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterVcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitVcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Diam90FunctionCallContext : FunctionCallContext {
		public ITerminalNode Diam90() { return GetToken(SinumerikParser.Diam90, 0); }
		public Diam90FunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterDiam90FunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitDiam90FunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiam90FunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubprogramFunctionCallContext : FunctionCallContext {
		public ITerminalNode SubProg() { return GetToken(SinumerikParser.SubProg, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public SubprogramFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSubprogramFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSubprogramFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetalFunctionCallContext : FunctionCallContext {
		public ITerminalNode Setal() { return GetToken(SinumerikParser.Setal, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public SetalFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSetalFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSetalFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetalFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SblofFunctionCallContext : FunctionCallContext {
		public ITerminalNode Sblof() { return GetToken(SinumerikParser.Sblof, 0); }
		public SblofFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSblofFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSblofFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSblofFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SblonFunctionCallContext : FunctionCallContext {
		public ITerminalNode Sblon() { return GetToken(SinumerikParser.Sblon, 0); }
		public SblonFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSblonFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSblonFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSblonFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Uaxis() { return GetToken(SinumerikParser.Uaxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterUcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitUcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModeacFunctionCallContext : FunctionCallContext {
		public ITerminalNode ModeAC() { return GetToken(SinumerikParser.ModeAC, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public ModeacFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterModeacFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitModeacFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeacFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StopreFunctionCallContext : FunctionCallContext {
		public ITerminalNode Stopre() { return GetToken(SinumerikParser.Stopre, 0); }
		public StopreFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterStopreFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitStopreFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopreFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SinFunctionCallContext : FunctionCallContext {
		public ITerminalNode Sin() { return GetToken(SinumerikParser.Sin, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public SinFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterSinFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitSinFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSinFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModeicFunctionCallContext : FunctionCallContext {
		public ITerminalNode ModeIC() { return GetToken(SinumerikParser.ModeIC, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public ModeicFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterModeicFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitModeicFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModeicFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XaxisNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Axis1() { return GetToken(SinumerikParser.Axis1, 0); }
		public XaxisNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterXaxisNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitXaxisNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaxisNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Aaxis() { return GetToken(SinumerikParser.Aaxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Waxis() { return GetToken(SinumerikParser.Waxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterWcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitWcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundFunctionCallContext : FunctionCallContext {
		public ITerminalNode Round() { return GetToken(SinumerikParser.Round, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public RoundFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterRoundFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitRoundFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToolNumberFunctionCallContext : FunctionCallContext {
		public ITerminalNode TFunc() { return GetToken(SinumerikParser.TFunc, 0); }
		public ToolNumberFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterToolNumberFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitToolNumberFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToolNumberFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KvectFunctionCallContext : FunctionCallContext {
		public ITerminalNode Kvect() { return GetToken(SinumerikParser.Kvect, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KvectFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterKvectFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitKvectFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvectFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BaxisNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Axis5() { return GetToken(SinumerikParser.Axis5, 0); }
		public BaxisNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterBaxisNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitBaxisNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaxisNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToolIDFunctionCallContext : FunctionCallContext {
		public ITerminalNode DFunc() { return GetToken(SinumerikParser.DFunc, 0); }
		public ToolIDFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterToolIDFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitToolIDFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToolIDFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AmirrorFunctionCallContext : FunctionCallContext {
		public ITerminalNode Amirror() { return GetToken(SinumerikParser.Amirror, 0); }
		public AmirrorFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAmirrorFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAmirrorFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmirrorFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisplonFunctionCallContext : FunctionCallContext {
		public ITerminalNode Displon() { return GetToken(SinumerikParser.Displon, 0); }
		public DisplonFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterDisplonFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitDisplonFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplonFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Xaxis() { return GetToken(SinumerikParser.Xaxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterXcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitXcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AxisByNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Ax() { return GetToken(SinumerikParser.Ax, 0); }
		public ITerminalNode OBracket() { return GetToken(SinumerikParser.OBracket, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CBracket() { return GetToken(SinumerikParser.CBracket, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public AxisByNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAxisByNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAxisByNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxisByNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AscaleFunctionCallContext : FunctionCallContext {
		public ITerminalNode AScale() { return GetToken(SinumerikParser.AScale, 0); }
		public AscaleFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAscaleFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAscaleFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscaleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TurnFunctionCallContext : FunctionCallContext {
		public ITerminalNode Turn() { return GetToken(SinumerikParser.Turn, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TurnFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterTurnFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitTurnFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTurnFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CosFunctionCallContext : FunctionCallContext {
		public ITerminalNode Cos() { return GetToken(SinumerikParser.Cos, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public CosFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterCosFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitCosFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCosFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtransFunctionCallContext : FunctionCallContext {
		public ITerminalNode Atrans() { return GetToken(SinumerikParser.Atrans, 0); }
		public AtransFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAtransFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAtransFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtransFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CcoordFunctionCallContext : FunctionCallContext {
		public ITerminalNode Caxis() { return GetToken(SinumerikParser.Caxis, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CcoordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterCcoordFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitCcoordFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCcoordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IvectFunctionCallContext : FunctionCallContext {
		public ITerminalNode Ivect() { return GetToken(SinumerikParser.Ivect, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IvectFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIvectFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIvectFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIvectFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisplofFunctionCallContext : FunctionCallContext {
		public ITerminalNode Displof() { return GetToken(SinumerikParser.Displof, 0); }
		public DisplofFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterDisplofFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitDisplofFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplofFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TanFunctionCallContext : FunctionCallContext {
		public ITerminalNode Tan() { return GetToken(SinumerikParser.Tan, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public TanFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterTanFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitTanFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTanFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TruncFunctionCallContext : FunctionCallContext {
		public ITerminalNode Trunc() { return GetToken(SinumerikParser.Trunc, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public TruncFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterTruncFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitTruncFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaxisNameFunctionCallContext : FunctionCallContext {
		public ITerminalNode Axis6() { return GetToken(SinumerikParser.Axis6, 0); }
		public CaxisNameFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterCaxisNameFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitCaxisNameFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaxisNameFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TransFunctionCallContext : FunctionCallContext {
		public ITerminalNode Trans() { return GetToken(SinumerikParser.Trans, 0); }
		public TransFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterTransFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitTransFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsFunctionCallContext : FunctionCallContext {
		public ITerminalNode Abs() { return GetToken(SinumerikParser.Abs, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public AbsFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAbsFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAbsFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DiamonFunctionCallContext : FunctionCallContext {
		public ITerminalNode Diamon() { return GetToken(SinumerikParser.Diamon, 0); }
		public DiamonFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterDiamonFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitDiamonFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiamonFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArotFunctionCallContext : FunctionCallContext {
		public ITerminalNode Arot() { return GetToken(SinumerikParser.Arot, 0); }
		public ArotFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterArotFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitArotFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArotFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PotFunctionCallContext : FunctionCallContext {
		public ITerminalNode Pot() { return GetToken(SinumerikParser.Pot, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public PotFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterPotFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitPotFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPotFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		int _la;
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new IdentifierFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; Match(Identifier);
				State = 96; Match(OParen);
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
					{
					State = 97; exprList();
					}
				}

				State = 100; Match(CParen);
				}
				break;
			case 2:
				_localctx = new PrintlnFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(Println);
				State = 102; Match(OParen);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
					{
					State = 103; expression(0);
					}
				}

				State = 106; Match(CParen);
				}
				break;
			case 3:
				_localctx = new SinFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; Match(Sin);
				State = 108; Match(OParen);
				State = 109; expression(0);
				State = 110; Match(CParen);
				}
				break;
			case 4:
				_localctx = new CosFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 112; Match(Cos);
				State = 113; Match(OParen);
				State = 114; expression(0);
				State = 115; Match(CParen);
				}
				break;
			case 5:
				_localctx = new TanFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; Match(Tan);
				State = 118; Match(OParen);
				State = 119; expression(0);
				State = 120; Match(CParen);
				}
				break;
			case 6:
				_localctx = new AsinFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 122; Match(ASin);
				State = 123; Match(OParen);
				State = 124; expression(0);
				State = 125; Match(CParen);
				}
				break;
			case 7:
				_localctx = new AcosFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 127; Match(ACos);
				State = 128; Match(OParen);
				State = 129; expression(0);
				State = 130; Match(CParen);
				}
				break;
			case 8:
				_localctx = new AtanFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 132; Match(ATan);
				State = 133; Match(OParen);
				State = 134; expression(0);
				State = 135; Match(CParen);
				}
				break;
			case 9:
				_localctx = new Atan2FunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 137; Match(ATan2);
				State = 138; Match(OParen);
				State = 139; expression(0);
				State = 140; Match(Comma);
				State = 141; expression(0);
				State = 142; Match(CParen);
				}
				break;
			case 10:
				_localctx = new SqrtFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 144; Match(Sqrt);
				State = 145; Match(OParen);
				State = 146; expression(0);
				State = 147; Match(CParen);
				}
				break;
			case 11:
				_localctx = new TruncFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 149; Match(Trunc);
				State = 150; Match(OParen);
				State = 151; expression(0);
				State = 152; Match(CParen);
				}
				break;
			case 12:
				_localctx = new AbsFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 154; Match(Abs);
				State = 155; Match(OParen);
				State = 156; expression(0);
				State = 157; Match(CParen);
				}
				break;
			case 13:
				_localctx = new PotFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 159; Match(Pot);
				State = 160; Match(OParen);
				State = 161; expression(0);
				State = 162; Match(CParen);
				}
				break;
			case 14:
				_localctx = new RoundFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 164; Match(Round);
				State = 165; Match(OParen);
				State = 166; expression(0);
				State = 167; Match(CParen);
				}
				break;
			case 15:
				_localctx = new ModeacFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 169; Match(ModeAC);
				State = 170; Match(OParen);
				State = 171; expression(0);
				State = 172; Match(CParen);
				}
				break;
			case 16:
				_localctx = new ModeicFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 174; Match(ModeIC);
				State = 175; Match(OParen);
				State = 176; expression(0);
				State = 177; Match(CParen);
				}
				break;
			case 17:
				_localctx = new XaxisNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 179; Match(Axis1);
				}
				break;
			case 18:
				_localctx = new YaxisNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 180; Match(Axis2);
				}
				break;
			case 19:
				_localctx = new ZaxisNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 181; Match(Axis3);
				}
				break;
			case 20:
				_localctx = new AaxisNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 182; Match(Axis4);
				}
				break;
			case 21:
				_localctx = new BaxisNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 183; Match(Axis5);
				}
				break;
			case 22:
				_localctx = new CaxisNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 184; Match(Axis6);
				}
				break;
			case 23:
				_localctx = new TransFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 185; Match(Trans);
				}
				break;
			case 24:
				_localctx = new AtransFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 186; Match(Atrans);
				}
				break;
			case 25:
				_localctx = new RotFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 187; Match(Rot);
				}
				break;
			case 26:
				_localctx = new ArotFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 188; Match(Arot);
				}
				break;
			case 27:
				_localctx = new ScaleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 189; Match(Scale);
				}
				break;
			case 28:
				_localctx = new AscaleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 190; Match(AScale);
				}
				break;
			case 29:
				_localctx = new MirrorFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 191; Match(Mirror);
				}
				break;
			case 30:
				_localctx = new AmirrorFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 192; Match(Amirror);
				}
				break;
			case 31:
				_localctx = new OriwksFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 193; Match(Oriwks);
				}
				break;
			case 32:
				_localctx = new OriaxesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 194; Match(Oriaxes);
				}
				break;
			case 33:
				_localctx = new TraoriFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 195; Match(Traori);
				}
				break;
			case 34:
				_localctx = new DiamonFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 196; Match(Diamon);
				}
				break;
			case 35:
				_localctx = new DiamofFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 197; Match(Diamof);
				}
				break;
			case 36:
				_localctx = new Diam90FunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 198; Match(Diam90);
				}
				break;
			case 37:
				_localctx = new DisplofFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 199; Match(Displof);
				}
				break;
			case 38:
				_localctx = new DisplonFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 200; Match(Displon);
				}
				break;
			case 39:
				_localctx = new SblofFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 201; Match(Sblof);
				}
				break;
			case 40:
				_localctx = new SblonFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 202; Match(Sblon);
				}
				break;
			case 41:
				_localctx = new SaveFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 203; Match(Save);
				}
				break;
			case 42:
				_localctx = new XcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 204; Match(Xaxis);
				State = 205; Match(Assign);
				State = 206; expression(0);
				}
				break;
			case 43:
				_localctx = new YcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 207; Match(Yaxis);
				State = 208; Match(Assign);
				State = 209; expression(0);
				}
				break;
			case 44:
				_localctx = new ZcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 210; Match(Zaxis);
				State = 211; Match(Assign);
				State = 212; expression(0);
				}
				break;
			case 45:
				_localctx = new AcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 213; Match(Aaxis);
				State = 214; Match(Assign);
				State = 215; expression(0);
				}
				break;
			case 46:
				_localctx = new BcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 216; Match(Baxis);
				State = 217; Match(Assign);
				State = 218; expression(0);
				}
				break;
			case 47:
				_localctx = new CcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 219; Match(Caxis);
				State = 220; Match(Assign);
				State = 221; expression(0);
				}
				break;
			case 48:
				_localctx = new UcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 48);
				{
				State = 222; Match(Uaxis);
				State = 223; Match(Assign);
				State = 224; expression(0);
				}
				break;
			case 49:
				_localctx = new VcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 49);
				{
				State = 225; Match(Vaxis);
				State = 226; Match(Assign);
				State = 227; expression(0);
				}
				break;
			case 50:
				_localctx = new WcoordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 50);
				{
				State = 228; Match(Waxis);
				State = 229; Match(Assign);
				State = 230; expression(0);
				}
				break;
			case 51:
				_localctx = new IvectFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 51);
				{
				State = 231; Match(Ivect);
				State = 232; Match(Assign);
				State = 233; expression(0);
				}
				break;
			case 52:
				_localctx = new JvectFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 52);
				{
				State = 234; Match(Jvect);
				State = 235; Match(Assign);
				State = 236; expression(0);
				}
				break;
			case 53:
				_localctx = new KvectFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 53);
				{
				State = 237; Match(Kvect);
				State = 238; Match(Assign);
				State = 239; expression(0);
				}
				break;
			case 54:
				_localctx = new RadiusFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 54);
				{
				State = 240; Match(Radius);
				State = 241; Match(Assign);
				State = 242; expression(0);
				}
				break;
			case 55:
				_localctx = new TurnFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 55);
				{
				State = 243; Match(Turn);
				State = 244; Match(Assign);
				State = 245; expression(0);
				}
				break;
			case 56:
				_localctx = new MmodeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 56);
				{
				State = 246; Match(MFunc);
				State = 248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 247; Match(Assign);
					}
					break;
				}
				State = 251;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 250; Match(Number);
					}
					break;
				}
				}
				break;
			case 57:
				_localctx = new FeedFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 57);
				{
				State = 253; Match(FFunc);
				State = 254; Match(Assign);
				State = 255; expression(0);
				}
				break;
			case 58:
				_localctx = new SpeedFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 58);
				{
				State = 256; Match(SFunc);
				State = 257; Match(Assign);
				State = 258; expression(0);
				}
				break;
			case 59:
				_localctx = new ToolNumberFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 59);
				{
				State = 259; Match(TFunc);
				}
				break;
			case 60:
				_localctx = new ToolNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 60);
				{
				State = 260; Match(TFunc);
				State = 261; Match(Assign);
				State = 262; Match(String);
				}
				break;
			case 61:
				_localctx = new ToolIDFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 61);
				{
				State = 263; Match(DFunc);
				}
				break;
			case 62:
				_localctx = new SubprogramFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 62);
				{
				State = 264; Match(SubProg);
				State = 265; Match(OParen);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
					{
					State = 266; exprList();
					}
				}

				State = 269; Match(CParen);
				}
				break;
			case 63:
				_localctx = new MsgFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 63);
				{
				State = 270; Match(Msg);
				State = 271; Match(OParen);
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__15) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
					{
					State = 272; printvar();
					}
				}

				State = 275; Match(CParen);
				}
				break;
			case 64:
				_localctx = new SetalFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 64);
				{
				State = 276; Match(Setal);
				State = 277; Match(OParen);
				State = 278; expression(0);
				State = 279; Match(CParen);
				}
				break;
			case 65:
				_localctx = new StopreFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 65);
				{
				State = 281; Match(Stopre);
				}
				break;
			case 66:
				_localctx = new AxisByNameFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 66);
				{
				State = 282; Match(Ax);
				State = 283; Match(OBracket);
				State = 284; expression(0);
				State = 285; Match(CBracket);
				State = 286; Match(Assign);
				State = 287; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public ITerminalNode EndIf() { return GetToken(SinumerikParser.EndIf, 0); }
		public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; ifStat();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 292; elseStat();
				}
			}

			State = 295; Match(EndIf);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(SinumerikParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(If);
			State = 298; expression(0);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (Println - 17)) | (1L << (Sin - 17)) | (1L << (ASin - 17)) | (1L << (Cos - 17)) | (1L << (ACos - 17)) | (1L << (Tan - 17)) | (1L << (ATan - 17)) | (1L << (ATan2 - 17)) | (1L << (Abs - 17)) | (1L << (Sqrt - 17)) | (1L << (Trunc - 17)) | (1L << (Pot - 17)) | (1L << (Round - 17)) | (1L << (Def - 17)) | (1L << (If - 17)) | (1L << (Return - 17)) | (1L << (Mcall - 17)) | (1L << (For - 17)) | (1L << (While - 17)) | (1L << (GotoB - 17)) | (1L << (GotoF - 17)) | (1L << (Goto - 17)) | (1L << (Trans - 17)) | (1L << (Atrans - 17)) | (1L << (Rot - 17)) | (1L << (Arot - 17)) | (1L << (Mirror - 17)) | (1L << (Amirror - 17)) | (1L << (Scale - 17)) | (1L << (AScale - 17)) | (1L << (Diamon - 17)) | (1L << (Diamof - 17)) | (1L << (Diam90 - 17)) | (1L << (Oriwks - 17)) | (1L << (Oriaxes - 17)) | (1L << (Traori - 17)) | (1L << (Turn - 17)) | (1L << (Msg - 17)) | (1L << (Setal - 17)) | (1L << (Sblof - 17)) | (1L << (Sblon - 17)) | (1L << (Save - 17)) | (1L << (Ax - 17)) | (1L << (Axis1 - 17)) | (1L << (Axis2 - 17)) | (1L << (Axis3 - 17)) | (1L << (Axis4 - 17)) | (1L << (Axis5 - 17)) | (1L << (Axis6 - 17)) | (1L << (Displof - 17)) | (1L << (Displon - 17)) | (1L << (Stopre - 17)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (SubProg - 82)) | (1L << (MFunc - 82)) | (1L << (FFunc - 82)) | (1L << (SFunc - 82)) | (1L << (TFunc - 82)) | (1L << (DFunc - 82)) | (1L << (Xaxis - 82)) | (1L << (Yaxis - 82)) | (1L << (Zaxis - 82)) | (1L << (Aaxis - 82)) | (1L << (Baxis - 82)) | (1L << (Caxis - 82)) | (1L << (Uaxis - 82)) | (1L << (Vaxis - 82)) | (1L << (Waxis - 82)) | (1L << (Ivect - 82)) | (1L << (Jvect - 82)) | (1L << (Kvect - 82)) | (1L << (ModeAC - 82)) | (1L << (ModeIC - 82)) | (1L << (Radius - 82)) | (1L << (GCodeText - 82)) | (1L << (Identifier - 82)) | (1L << (Labelstart - 82)) | (1L << (CR - 82)))) != 0)) {
				{
				{
				State = 299; statement();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfGotostatContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(SinumerikParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode GotoB() { return GetToken(SinumerikParser.GotoB, 0); }
		public MetkaDestContext metkaDest() {
			return GetRuleContext<MetkaDestContext>(0);
		}
		public ITerminalNode GotoF() { return GetToken(SinumerikParser.GotoF, 0); }
		public ITerminalNode Goto() { return GetToken(SinumerikParser.Goto, 0); }
		public IfGotostatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifGotostat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIfGotostat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIfGotostat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfGotostat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfGotostatContext ifGotostat() {
		IfGotostatContext _localctx = new IfGotostatContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifGotostat);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; Match(If);
				State = 306; expression(0);
				State = 307; Match(GotoB);
				State = 308; metkaDest();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; Match(If);
				State = 311; expression(0);
				State = 312; Match(GotoF);
				State = 313; metkaDest();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 315; Match(If);
				State = 316; expression(0);
				State = 317; Match(Goto);
				State = 318; metkaDest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(SinumerikParser.Else, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterElseStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitElseStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(Else);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (Println - 17)) | (1L << (Sin - 17)) | (1L << (ASin - 17)) | (1L << (Cos - 17)) | (1L << (ACos - 17)) | (1L << (Tan - 17)) | (1L << (ATan - 17)) | (1L << (ATan2 - 17)) | (1L << (Abs - 17)) | (1L << (Sqrt - 17)) | (1L << (Trunc - 17)) | (1L << (Pot - 17)) | (1L << (Round - 17)) | (1L << (Def - 17)) | (1L << (If - 17)) | (1L << (Return - 17)) | (1L << (Mcall - 17)) | (1L << (For - 17)) | (1L << (While - 17)) | (1L << (GotoB - 17)) | (1L << (GotoF - 17)) | (1L << (Goto - 17)) | (1L << (Trans - 17)) | (1L << (Atrans - 17)) | (1L << (Rot - 17)) | (1L << (Arot - 17)) | (1L << (Mirror - 17)) | (1L << (Amirror - 17)) | (1L << (Scale - 17)) | (1L << (AScale - 17)) | (1L << (Diamon - 17)) | (1L << (Diamof - 17)) | (1L << (Diam90 - 17)) | (1L << (Oriwks - 17)) | (1L << (Oriaxes - 17)) | (1L << (Traori - 17)) | (1L << (Turn - 17)) | (1L << (Msg - 17)) | (1L << (Setal - 17)) | (1L << (Sblof - 17)) | (1L << (Sblon - 17)) | (1L << (Save - 17)) | (1L << (Ax - 17)) | (1L << (Axis1 - 17)) | (1L << (Axis2 - 17)) | (1L << (Axis3 - 17)) | (1L << (Axis4 - 17)) | (1L << (Axis5 - 17)) | (1L << (Axis6 - 17)) | (1L << (Displof - 17)) | (1L << (Displon - 17)) | (1L << (Stopre - 17)))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (SubProg - 82)) | (1L << (MFunc - 82)) | (1L << (FFunc - 82)) | (1L << (SFunc - 82)) | (1L << (TFunc - 82)) | (1L << (DFunc - 82)) | (1L << (Xaxis - 82)) | (1L << (Yaxis - 82)) | (1L << (Zaxis - 82)) | (1L << (Aaxis - 82)) | (1L << (Baxis - 82)) | (1L << (Caxis - 82)) | (1L << (Uaxis - 82)) | (1L << (Vaxis - 82)) | (1L << (Waxis - 82)) | (1L << (Ivect - 82)) | (1L << (Jvect - 82)) | (1L << (Kvect - 82)) | (1L << (ModeAC - 82)) | (1L << (ModeIC - 82)) | (1L << (Radius - 82)) | (1L << (GCodeText - 82)) | (1L << (Identifier - 82)) | (1L << (Labelstart - 82)) | (1L << (CR - 82)))) != 0)) {
				{
				{
				State = 323; statement();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public ITerminalNode Proc() { return GetToken(SinumerikParser.Proc, 0); }
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public IdListContext idList() {
			return GetRuleContext<IdListContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(Proc);
			State = 330; Match(Identifier);
			State = 331; Match(OParen);
			State = 333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) {
				{
				State = 332; idList();
				}
			}

			State = 335; Match(CParen);
			State = 336; block();
			State = 337; returnStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(SinumerikParser.For, 0); }
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode To() { return GetToken(SinumerikParser.To, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode EndFor() { return GetToken(SinumerikParser.EndFor, 0); }
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(For);
			State = 340; Match(Identifier);
			State = 341; Match(Assign);
			State = 342; expression(0);
			State = 343; Match(To);
			State = 344; expression(0);
			State = 345; block();
			State = 346; Match(EndFor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(SinumerikParser.While, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode EndWhile() { return GetToken(SinumerikParser.EndWhile, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(While);
			State = 349; expression(0);
			State = 350; block();
			State = 351; Match(EndWhile);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class McallStatementContext : ParserRuleContext {
		public ITerminalNode[] Mcall() { return GetTokens(SinumerikParser.Mcall); }
		public ITerminalNode Mcall(int i) {
			return GetToken(SinumerikParser.Mcall, i);
		}
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public McallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mcallStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMcallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMcallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMcallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public McallStatementContext mcallStatement() {
		McallStatementContext _localctx = new McallStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_mcallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(Mcall);
			State = 354; Match(Identifier);
			State = 355; Match(OParen);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
				{
				State = 356; exprList();
				}
			}

			State = 359; Match(CParen);
			State = 360; block();
			State = 361; Match(Mcall);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode GotoB() { return GetToken(SinumerikParser.GotoB, 0); }
		public MetkaDestContext metkaDest() {
			return GetRuleContext<MetkaDestContext>(0);
		}
		public ITerminalNode GotoF() { return GetToken(SinumerikParser.GotoF, 0); }
		public ITerminalNode Goto() { return GetToken(SinumerikParser.Goto, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_gotoStatement);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GotoB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 363; Match(GotoB);
				State = 364; metkaDest();
				}
				break;
			case GotoF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; Match(GotoF);
				State = 366; metkaDest();
				}
				break;
			case Goto:
				EnterOuterAlt(_localctx, 3);
				{
				State = 367; Match(Goto);
				State = 368; metkaDest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(SinumerikParser.Return, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(Return);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdListContext : ParserRuleContext {
		public TypeDefContext[] typeDef() {
			return GetRuleContexts<TypeDefContext>();
		}
		public TypeDefContext typeDef(int i) {
			return GetRuleContext<TypeDefContext>(i);
		}
		public ITerminalNode[] Identifier() { return GetTokens(SinumerikParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(SinumerikParser.Identifier, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SinumerikParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SinumerikParser.Comma, i);
		}
		public IdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIdList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdListContext idList() {
		IdListContext _localctx = new IdListContext(Context, State);
		EnterRule(_localctx, 32, RULE_idList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; typeDef();
			State = 374; Match(Identifier);
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 375; Match(Comma);
				State = 376; typeDef();
				State = 377; Match(Identifier);
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(SinumerikParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(SinumerikParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 34, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; expression(0);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 385; Match(Comma);
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
					{
					State = 386; expression(0);
					}
				}

				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		public ITerminalNode Bool() { return GetToken(SinumerikParser.Bool, 0); }
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		public ITerminalNode Number() { return GetToken(SinumerikParser.Number, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Mod() { return GetToken(SinumerikParser.Mod, 0); }
		public ModExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterModExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitModExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Div() { return GetToken(SinumerikParser.Div, 0); }
		public DivExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterDivExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitDivExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Or() { return GetToken(SinumerikParser.Or, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		public ITerminalNode Subtract() { return GetToken(SinumerikParser.Subtract, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Pow() { return GetToken(SinumerikParser.Pow, 0); }
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Equals() { return GetToken(SinumerikParser.Equals, 0); }
		public ITerminalNode NEquals() { return GetToken(SinumerikParser.NEquals, 0); }
		public EqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterEqExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitEqExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode And() { return GetToken(SinumerikParser.And, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		public ITerminalNode String() { return GetToken(SinumerikParser.String, 0); }
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExpressionContext : ExpressionContext {
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public ExpressionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterExpressionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitExpressionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Add() { return GetToken(SinumerikParser.Add, 0); }
		public ITerminalNode Subtract() { return GetToken(SinumerikParser.Subtract, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GTEquals() { return GetToken(SinumerikParser.GTEquals, 0); }
		public ITerminalNode LTEquals() { return GetToken(SinumerikParser.LTEquals, 0); }
		public ITerminalNode GT() { return GetToken(SinumerikParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(SinumerikParser.LT, 0); }
		public CompExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterCompExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitCompExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExpressionContext : ExpressionContext {
		public ITerminalNode Null() { return GetToken(SinumerikParser.Null, 0); }
		public NullExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterNullExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitNullExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(SinumerikParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(SinumerikParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(SinumerikParser.Modulus, 0); }
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExpressionContext : ExpressionContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public ListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitListExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InputExpressionContext : ExpressionContext {
		public ITerminalNode Input() { return GetToken(SinumerikParser.Input, 0); }
		public ITerminalNode OParen() { return GetToken(SinumerikParser.OParen, 0); }
		public ITerminalNode CParen() { return GetToken(SinumerikParser.CParen, 0); }
		public ITerminalNode String() { return GetToken(SinumerikParser.String, 0); }
		public InputExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterInputExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitInputExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 395; Match(Subtract);
				State = 396; expression(20);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 397; Match(T__0);
				State = 398; expression(19);
				}
				break;
			case 3:
				{
				_localctx = new NumberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 399; Match(Number);
				}
				break;
			case 4:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 400; Match(Bool);
				}
				break;
			case 5:
				{
				_localctx = new NullExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 401; Match(Null);
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 402; functionCall();
				State = 404;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 403; indexes();
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new ListExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 406; list();
				State = 408;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 407; indexes();
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 410; Match(Identifier);
				State = 412;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 411; indexes();
					}
					break;
				}
				}
				break;
			case 9:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 414; Match(String);
				State = 416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 415; indexes();
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new ExpressionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 418; Match(OParen);
				State = 419; expression(0);
				State = 420; Match(CParen);
				State = 422;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 421; indexes();
					}
					break;
				}
				}
				break;
			case 11:
				{
				_localctx = new InputExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 424; Match(Input);
				State = 425; Match(OParen);
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==String) {
					{
					State = 426; Match(String);
					}
				}

				State = 429; Match(CParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 461;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 459;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 432;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 433; Match(Pow);
						State = 434; expression(18);
						}
						break;
					case 2:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 435;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 436;
						((MultExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (Multiply - 117)) | (1L << (Divide - 117)) | (1L << (Modulus - 117)))) != 0)) ) {
							((MultExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 437; expression(18);
						}
						break;
					case 3:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 438;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 439;
						((AddExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Subtract) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 440; expression(17);
						}
						break;
					case 4:
						{
						_localctx = new CompExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 441;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 442;
						((CompExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (GTEquals - 109)) | (1L << (LTEquals - 109)) | (1L << (GT - 109)) | (1L << (LT - 109)))) != 0)) ) {
							((CompExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 443; expression(16);
						}
						break;
					case 5:
						{
						_localctx = new EqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 444;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 445;
						((EqExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NEquals) ) {
							((EqExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 446; expression(15);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 447;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 448; Match(And);
						State = 449; expression(14);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 450;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 451; Match(Or);
						State = 452; expression(13);
						}
						break;
					case 8:
						{
						_localctx = new ModExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 453;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 454; Match(Mod);
						State = 455; expression(12);
						}
						break;
					case 9:
						{
						_localctx = new DivExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 456;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 457; Match(Div);
						State = 458; expression(11);
						}
						break;
					}
					} 
				}
				State = 463;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GcodeStatementContext : ParserRuleContext {
		public ITerminalNode[] GCodeText() { return GetTokens(SinumerikParser.GCodeText); }
		public ITerminalNode GCodeText(int i) {
			return GetToken(SinumerikParser.GCodeText, i);
		}
		public ITerminalNode[] CR() { return GetTokens(SinumerikParser.CR); }
		public ITerminalNode CR(int i) {
			return GetToken(SinumerikParser.CR, i);
		}
		public GcodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcodeStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterGcodeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitGcodeStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGcodeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GcodeStatementContext gcodeStatement() {
		GcodeStatementContext _localctx = new GcodeStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_gcodeStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(GCodeText);
			State = 471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 465; Match(GCodeText);
					State = 467;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						State = 466; Match(CR);
						}
						break;
					}
					}
					} 
				}
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ITerminalNode OBracket() { return GetToken(SinumerikParser.OBracket, 0); }
		public ITerminalNode CBracket() { return GetToken(SinumerikParser.CBracket, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 40, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(OBracket);
			State = 476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0)) {
				{
				State = 475; exprList();
				}
			}

			State = 478; Match(CBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public IndexesContext indexes() {
			return GetRuleContext<IndexesContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(SinumerikParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(SinumerikParser.Comma, 0); }
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 42, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(Identifier);
			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 481; indexes();
				}
				break;
			}
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 484; Match(Assign);
				}
			}

			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 487; expression(0);
				}
				break;
			}
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 490; Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexesContext : ParserRuleContext {
		public ITerminalNode[] OBracket() { return GetTokens(SinumerikParser.OBracket); }
		public ITerminalNode OBracket(int i) {
			return GetToken(SinumerikParser.OBracket, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] CBracket() { return GetTokens(SinumerikParser.CBracket); }
		public ITerminalNode CBracket(int i) {
			return GetToken(SinumerikParser.CBracket, i);
		}
		public IndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterIndexes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitIndexes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexesContext indexes() {
		IndexesContext _localctx = new IndexesContext(Context, State);
		EnterRule(_localctx, 46, RULE_indexes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 495; Match(OBracket);
					State = 496; expression(0);
					State = 497; Match(CBracket);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 501;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintvarContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrintvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterPrintvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitPrintvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintvarContext printvar() {
		PrintvarContext _localctx = new PrintvarContext(Context, State);
		EnterRule(_localctx, 48, RULE_printvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__15) {
					{
					State = 503; Match(T__15);
					}
				}

				State = 506; expression(0);
				State = 508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 507; Match(T__15);
					}
					break;
				}
				}
				}
				State = 512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__15) | (1L << Println) | (1L << Input) | (1L << Sin) | (1L << ASin) | (1L << Cos) | (1L << ACos) | (1L << Tan) | (1L << ATan) | (1L << ATan2) | (1L << Abs) | (1L << Sqrt) | (1L << Trunc) | (1L << Pot) | (1L << Round) | (1L << Trans) | (1L << Atrans) | (1L << Rot) | (1L << Arot) | (1L << Mirror) | (1L << Amirror) | (1L << Scale) | (1L << AScale) | (1L << Diamon) | (1L << Diamof) | (1L << Diam90) | (1L << Oriwks) | (1L << Oriaxes) | (1L << Traori))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Turn - 64)) | (1L << (Msg - 64)) | (1L << (Setal - 64)) | (1L << (Sblof - 64)) | (1L << (Sblon - 64)) | (1L << (Save - 64)) | (1L << (Ax - 64)) | (1L << (Axis1 - 64)) | (1L << (Axis2 - 64)) | (1L << (Axis3 - 64)) | (1L << (Axis4 - 64)) | (1L << (Axis5 - 64)) | (1L << (Axis6 - 64)) | (1L << (Displof - 64)) | (1L << (Displon - 64)) | (1L << (Stopre - 64)) | (1L << (SubProg - 64)) | (1L << (Null - 64)) | (1L << (MFunc - 64)) | (1L << (FFunc - 64)) | (1L << (SFunc - 64)) | (1L << (TFunc - 64)) | (1L << (DFunc - 64)) | (1L << (Xaxis - 64)) | (1L << (Yaxis - 64)) | (1L << (Zaxis - 64)) | (1L << (Aaxis - 64)) | (1L << (Baxis - 64)) | (1L << (Caxis - 64)) | (1L << (Uaxis - 64)) | (1L << (Vaxis - 64)) | (1L << (Waxis - 64)) | (1L << (Ivect - 64)) | (1L << (Jvect - 64)) | (1L << (Kvect - 64)) | (1L << (ModeAC - 64)) | (1L << (ModeIC - 64)) | (1L << (Radius - 64)) | (1L << (Subtract - 64)) | (1L << (OBracket - 64)) | (1L << (OParen - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Bool - 130)) | (1L << (Number - 130)) | (1L << (Identifier - 130)) | (1L << (String - 130)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetkaStartContext : ParserRuleContext {
		public ITerminalNode Labelstart() { return GetToken(SinumerikParser.Labelstart, 0); }
		public MetkaStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metkaStart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMetkaStart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMetkaStart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetkaStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetkaStartContext metkaStart() {
		MetkaStartContext _localctx = new MetkaStartContext(Context, State);
		EnterRule(_localctx, 50, RULE_metkaStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; Match(Labelstart);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetkaDestContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SinumerikParser.Identifier, 0); }
		public MetkaDestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metkaDest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterMetkaDest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitMetkaDest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetkaDest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetkaDestContext metkaDest() {
		MetkaDestContext _localctx = new MetkaDestContext(Context, State);
		EnterRule(_localctx, 52, RULE_metkaDest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrlfStatementContext : ParserRuleContext {
		public ITerminalNode CR() { return GetToken(SinumerikParser.CR, 0); }
		public CrlfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crlfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.EnterCrlfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikListener typedListener = listener as ISinumerikListener;
			if (typedListener != null) typedListener.ExitCrlfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISinumerikVisitor<TResult> typedVisitor = visitor as ISinumerikVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCrlfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CrlfStatementContext crlfStatement() {
		CrlfStatementContext _localctx = new CrlfStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_crlfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; Match(CR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x8D', '\x20B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', '@', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x43', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'R', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x6', '\x6', '^', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '_', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x65', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'k', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\xFB', '\n', '\a', '\x3', '\a', '\x5', '\a', '\xFE', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x10E', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x114', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x124', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x128', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\x12F', '\n', '\t', '\f', '\t', '\xE', '\t', '\x132', '\v', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x143', '\n', '\n', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x147', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x14A', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x150', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x168', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x174', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x17E', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\x181', '\v', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x186', '\n', '\x13', '\a', 
		'\x13', '\x188', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x18B', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x197', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x19B', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x19F', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x1A3', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x1A9', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x1AE', '\n', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x1B1', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x1CE', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x1D1', '\v', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1D6', '\n', 
		'\x15', '\a', '\x15', '\x1D8', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\x1DB', '\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x1DF', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x1E5', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x1E8', 
		'\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x1EB', '\n', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x1EE', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x6', '\x19', 
		'\x1F6', '\n', '\x19', '\r', '\x19', '\xE', '\x19', '\x1F7', '\x3', '\x1A', 
		'\x5', '\x1A', '\x1FB', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x1FF', '\n', '\x1A', '\x6', '\x1A', '\x201', '\n', '\x1A', '\r', 
		'\x1A', '\xE', '\x1A', '\x202', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x2', '\x3', 
		'&', '\x1E', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', '\x2', '\a', '\x3', 
		'\x2', 'w', 'y', '\x3', '\x2', 'u', 'v', '\x4', '\x2', 'o', 'p', 's', 
		't', '\x3', '\x2', 'm', 'n', '\x3', '\x2', '\x4', '\x11', '\x2', '\x275', 
		'\x2', ':', '\x3', '\x2', '\x2', '\x2', '\x4', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'Z', '\x3', '\x2', '\x2', '\x2', '\f', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x125', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x144', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x155', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x173', '\x3', '\x2', '\x2', '\x2', ' ', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x177', '\x3', '\x2', '\x2', '\x2', '$', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x1D2', '\x3', '\x2', '\x2', '\x2', '*', '\x1DC', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x1E2', '\x3', '\x2', '\x2', '\x2', '.', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x200', '\x3', '\x2', '\x2', '\x2', '\x34', '\x204', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x206', '\x3', '\x2', '\x2', '\x2', '\x38', '\x208', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x5', '\x4', '\x3', '\x2', ';', 
		'<', '\a', '\x2', '\x2', '\x3', '<', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'=', '@', '\x5', '\x6', '\x4', '\x2', '>', '@', '\x5', '\x16', '\f', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'R', '\x5', '\b', '\x5', '\x2', '\x45', 'R', '\x5', '\n', '\x6', '\x2', 
		'\x46', 'R', '\x5', '(', '\x15', '\x2', 'G', 'R', '\x5', '\f', '\a', '\x2', 
		'H', 'R', '\x5', '\xE', '\b', '\x2', 'I', 'R', '\x5', '\x18', '\r', '\x2', 
		'J', 'R', '\x5', '\x1A', '\xE', '\x2', 'K', 'R', '\x5', '\x1C', '\xF', 
		'\x2', 'L', 'R', '\x5', '\x12', '\n', '\x2', 'M', 'R', '\x5', '\x1E', 
		'\x10', '\x2', 'N', 'R', '\x5', '\x34', '\x1B', '\x2', 'O', 'R', '\x5', 
		'\x38', '\x1D', '\x2', 'P', 'R', '\x5', ' ', '\x11', '\x2', 'Q', '\x44', 
		'\x3', '\x2', '\x2', '\x2', 'Q', '\x45', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'Q', 'G', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'H', '\x3', '\x2', '\x2', '\x2', 'Q', 'I', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'J', '\x3', '\x2', '\x2', '\x2', 'Q', 'K', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'L', '\x3', '\x2', '\x2', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\a', '\x87', '\x2', '\x2', 'T', 'V', '\x5', '\x30', 
		'\x19', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', 
		'\x80', '\x2', '\x2', 'X', 'Y', '\x5', '&', '\x14', '\x2', 'Y', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '&', '\x2', '\x2', '[', ']', 
		'\x5', '.', '\x18', '\x2', '\\', '^', '\x5', ',', '\x17', '\x2', ']', 
		'\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', 
		'`', '\v', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x87', '\x2', 
		'\x2', '\x62', '\x64', '\a', '~', '\x2', '\x2', '\x63', '\x65', '\x5', 
		'$', '\x13', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x124', '\a', '\x7F', '\x2', '\x2', 'g', 'h', '\a', '\x13', 
		'\x2', '\x2', 'h', 'j', '\a', '~', '\x2', '\x2', 'i', 'k', '\x5', '&', 
		'\x14', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '\x124', 
		'\a', '\x7F', '\x2', '\x2', 'm', 'n', '\a', '\x18', '\x2', '\x2', 'n', 
		'o', '\a', '~', '\x2', '\x2', 'o', 'p', '\x5', '&', '\x14', '\x2', 'p', 
		'q', '\a', '\x7F', '\x2', '\x2', 'q', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '\x1A', '\x2', '\x2', 's', 't', '\a', '~', '\x2', '\x2', 
		't', 'u', '\x5', '&', '\x14', '\x2', 'u', 'v', '\a', '\x7F', '\x2', '\x2', 
		'v', '\x124', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\x1C', '\x2', 
		'\x2', 'x', 'y', '\a', '~', '\x2', '\x2', 'y', 'z', '\x5', '&', '\x14', 
		'\x2', 'z', '{', '\a', '\x7F', '\x2', '\x2', '{', '\x124', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\a', '\x19', '\x2', '\x2', '}', '~', '\a', '~', 
		'\x2', '\x2', '~', '\x7F', '\x5', '&', '\x14', '\x2', '\x7F', '\x80', 
		'\a', '\x7F', '\x2', '\x2', '\x80', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\a', '\x1B', '\x2', '\x2', '\x82', '\x83', '\a', '~', 
		'\x2', '\x2', '\x83', '\x84', '\x5', '&', '\x14', '\x2', '\x84', '\x85', 
		'\a', '\x7F', '\x2', '\x2', '\x85', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\a', '\x1D', '\x2', '\x2', '\x87', '\x88', '\a', '~', 
		'\x2', '\x2', '\x88', '\x89', '\x5', '&', '\x14', '\x2', '\x89', '\x8A', 
		'\a', '\x7F', '\x2', '\x2', '\x8A', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\a', '\x1E', '\x2', '\x2', '\x8C', '\x8D', '\a', '~', 
		'\x2', '\x2', '\x8D', '\x8E', '\x5', '&', '\x14', '\x2', '\x8E', '\x8F', 
		'\a', '\x81', '\x2', '\x2', '\x8F', '\x90', '\x5', '&', '\x14', '\x2', 
		'\x90', '\x91', '\a', '\x7F', '\x2', '\x2', '\x91', '\x124', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\a', ' ', '\x2', '\x2', '\x93', '\x94', 
		'\a', '~', '\x2', '\x2', '\x94', '\x95', '\x5', '&', '\x14', '\x2', '\x95', 
		'\x96', '\a', '\x7F', '\x2', '\x2', '\x96', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x98', '\a', '!', '\x2', '\x2', '\x98', '\x99', '\a', 
		'~', '\x2', '\x2', '\x99', '\x9A', '\x5', '&', '\x14', '\x2', '\x9A', 
		'\x9B', '\a', '\x7F', '\x2', '\x2', '\x9B', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\x1F', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'~', '\x2', '\x2', '\x9E', '\x9F', '\x5', '&', '\x14', '\x2', '\x9F', 
		'\xA0', '\a', '\x7F', '\x2', '\x2', '\xA0', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\"', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'~', '\x2', '\x2', '\xA3', '\xA4', '\x5', '&', '\x14', '\x2', '\xA4', 
		'\xA5', '\a', '\x7F', '\x2', '\x2', '\xA5', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '%', '\x2', '\x2', '\xA7', '\xA8', '\a', 
		'~', '\x2', '\x2', '\xA8', '\xA9', '\x5', '&', '\x14', '\x2', '\xA9', 
		'\xAA', '\a', '\x7F', '\x2', '\x2', '\xAA', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', 'h', '\x2', '\x2', '\xAC', '\xAD', '\a', 
		'~', '\x2', '\x2', '\xAD', '\xAE', '\x5', '&', '\x14', '\x2', '\xAE', 
		'\xAF', '\a', '\x7F', '\x2', '\x2', '\xAF', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\a', 'i', '\x2', '\x2', '\xB1', '\xB2', '\a', 
		'~', '\x2', '\x2', '\xB2', '\xB3', '\x5', '&', '\x14', '\x2', '\xB3', 
		'\xB4', '\a', '\x7F', '\x2', '\x2', '\xB4', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\x124', '\a', 'I', '\x2', '\x2', '\xB6', '\x124', '\a', 
		'J', '\x2', '\x2', '\xB7', '\x124', '\a', 'K', '\x2', '\x2', '\xB8', '\x124', 
		'\a', 'L', '\x2', '\x2', '\xB9', '\x124', '\a', 'M', '\x2', '\x2', '\xBA', 
		'\x124', '\a', 'N', '\x2', '\x2', '\xBB', '\x124', '\a', '\x34', '\x2', 
		'\x2', '\xBC', '\x124', '\a', '\x35', '\x2', '\x2', '\xBD', '\x124', '\a', 
		'\x36', '\x2', '\x2', '\xBE', '\x124', '\a', '\x37', '\x2', '\x2', '\xBF', 
		'\x124', '\a', ':', '\x2', '\x2', '\xC0', '\x124', '\a', ';', '\x2', '\x2', 
		'\xC1', '\x124', '\a', '\x38', '\x2', '\x2', '\xC2', '\x124', '\a', '\x39', 
		'\x2', '\x2', '\xC3', '\x124', '\a', '?', '\x2', '\x2', '\xC4', '\x124', 
		'\a', '@', '\x2', '\x2', '\xC5', '\x124', '\a', '\x41', '\x2', '\x2', 
		'\xC6', '\x124', '\a', '<', '\x2', '\x2', '\xC7', '\x124', '\a', '=', 
		'\x2', '\x2', '\xC8', '\x124', '\a', '>', '\x2', '\x2', '\xC9', '\x124', 
		'\a', 'O', '\x2', '\x2', '\xCA', '\x124', '\a', 'P', '\x2', '\x2', '\xCB', 
		'\x124', '\a', '\x45', '\x2', '\x2', '\xCC', '\x124', '\a', '\x46', '\x2', 
		'\x2', '\xCD', '\x124', '\a', 'G', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\\', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x80', '\x2', '\x2', '\xD0', 
		'\x124', '\x5', '&', '\x14', '\x2', '\xD1', '\xD2', '\a', ']', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\x80', '\x2', '\x2', '\xD3', '\x124', '\x5', 
		'&', '\x14', '\x2', '\xD4', '\xD5', '\a', '^', '\x2', '\x2', '\xD5', '\xD6', 
		'\a', '\x80', '\x2', '\x2', '\xD6', '\x124', '\x5', '&', '\x14', '\x2', 
		'\xD7', '\xD8', '\a', '_', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x80', 
		'\x2', '\x2', '\xD9', '\x124', '\x5', '&', '\x14', '\x2', '\xDA', '\xDB', 
		'\a', '`', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x80', '\x2', '\x2', '\xDC', 
		'\x124', '\x5', '&', '\x14', '\x2', '\xDD', '\xDE', '\a', '\x61', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x80', '\x2', '\x2', '\xDF', '\x124', '\x5', 
		'&', '\x14', '\x2', '\xE0', '\xE1', '\a', '\x62', '\x2', '\x2', '\xE1', 
		'\xE2', '\a', '\x80', '\x2', '\x2', '\xE2', '\x124', '\x5', '&', '\x14', 
		'\x2', '\xE3', '\xE4', '\a', '\x63', '\x2', '\x2', '\xE4', '\xE5', '\a', 
		'\x80', '\x2', '\x2', '\xE5', '\x124', '\x5', '&', '\x14', '\x2', '\xE6', 
		'\xE7', '\a', '\x64', '\x2', '\x2', '\xE7', '\xE8', '\a', '\x80', '\x2', 
		'\x2', '\xE8', '\x124', '\x5', '&', '\x14', '\x2', '\xE9', '\xEA', '\a', 
		'\x65', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x80', '\x2', '\x2', '\xEB', 
		'\x124', '\x5', '&', '\x14', '\x2', '\xEC', '\xED', '\a', '\x66', '\x2', 
		'\x2', '\xED', '\xEE', '\a', '\x80', '\x2', '\x2', '\xEE', '\x124', '\x5', 
		'&', '\x14', '\x2', '\xEF', '\xF0', '\a', 'g', '\x2', '\x2', '\xF0', '\xF1', 
		'\a', '\x80', '\x2', '\x2', '\xF1', '\x124', '\x5', '&', '\x14', '\x2', 
		'\xF2', '\xF3', '\a', 'j', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x80', 
		'\x2', '\x2', '\xF4', '\x124', '\x5', '&', '\x14', '\x2', '\xF5', '\xF6', 
		'\a', '\x42', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x80', '\x2', '\x2', 
		'\xF7', '\x124', '\x5', '&', '\x14', '\x2', '\xF8', '\xFA', '\a', 'V', 
		'\x2', '\x2', '\xF9', '\xFB', '\a', '\x80', '\x2', '\x2', '\xFA', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', '\x85', 
		'\x2', '\x2', '\xFD', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x100', '\a', 'W', '\x2', '\x2', '\x100', '\x101', '\a', '\x80', 
		'\x2', '\x2', '\x101', '\x124', '\x5', '&', '\x14', '\x2', '\x102', '\x103', 
		'\a', 'X', '\x2', '\x2', '\x103', '\x104', '\a', '\x80', '\x2', '\x2', 
		'\x104', '\x124', '\x5', '&', '\x14', '\x2', '\x105', '\x124', '\a', 'Y', 
		'\x2', '\x2', '\x106', '\x107', '\a', 'Y', '\x2', '\x2', '\x107', '\x108', 
		'\a', '\x80', '\x2', '\x2', '\x108', '\x124', '\a', '\x8A', '\x2', '\x2', 
		'\x109', '\x124', '\a', 'Z', '\x2', '\x2', '\x10A', '\x10B', '\a', 'T', 
		'\x2', '\x2', '\x10B', '\x10D', '\a', '~', '\x2', '\x2', '\x10C', '\x10E', 
		'\x5', '$', '\x13', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x124', '\a', '\x7F', '\x2', '\x2', '\x110', 
		'\x111', '\a', '\x43', '\x2', '\x2', '\x111', '\x113', '\a', '~', '\x2', 
		'\x2', '\x112', '\x114', '\x5', '\x32', '\x1A', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x124', '\a', 
		'\x7F', '\x2', '\x2', '\x116', '\x117', '\a', '\x44', '\x2', '\x2', '\x117', 
		'\x118', '\a', '~', '\x2', '\x2', '\x118', '\x119', '\x5', '&', '\x14', 
		'\x2', '\x119', '\x11A', '\a', '\x7F', '\x2', '\x2', '\x11A', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x124', '\a', 'Q', '\x2', '\x2', 
		'\x11C', '\x11D', '\a', 'H', '\x2', '\x2', '\x11D', '\x11E', '\a', '|', 
		'\x2', '\x2', '\x11E', '\x11F', '\x5', '&', '\x14', '\x2', '\x11F', '\x120', 
		'\a', '}', '\x2', '\x2', '\x120', '\x121', '\a', '\x80', '\x2', '\x2', 
		'\x121', '\x122', '\x5', '&', '\x14', '\x2', '\x122', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x61', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x123', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x123', 'r', '\x3', '\x2', '\x2', '\x2', '\x123', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '|', '\x3', '\x2', '\x2', '\x2', '\x123', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x123', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\x97', '\x3', '\x2', '\x2', '\x2', '\x123', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x123', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x123', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x123', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x123', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xBC', '\x3', '\x2', '\x2', '\x2', '\x123', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x123', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x123', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x123', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xC6', '\x3', '\x2', '\x2', '\x2', '\x123', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x123', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x123', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x123', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x123', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x123', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x123', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x123', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x123', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x123', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x105', '\x3', '\x2', '\x2', '\x2', '\x123', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x109', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x123', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x116', '\x3', '\x2', '\x2', '\x2', '\x123', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\r', '\x3', '\x2', '\x2', '\x2', '\x125', '\x127', '\x5', '\x10', 
		'\t', '\x2', '\x126', '\x128', '\x5', '\x14', '\v', '\x2', '\x127', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', 
		')', '\x2', '\x2', '\x12A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '(', '\x2', '\x2', '\x12C', '\x130', '\x5', '&', '\x14', 
		'\x2', '\x12D', '\x12F', '\x5', '\x6', '\x4', '\x2', '\x12E', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x11', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', '(', '\x2', 
		'\x2', '\x134', '\x135', '\x5', '&', '\x14', '\x2', '\x135', '\x136', 
		'\a', '\x31', '\x2', '\x2', '\x136', '\x137', '\x5', '\x36', '\x1C', '\x2', 
		'\x137', '\x143', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\a', 
		'(', '\x2', '\x2', '\x139', '\x13A', '\x5', '&', '\x14', '\x2', '\x13A', 
		'\x13B', '\a', '\x32', '\x2', '\x2', '\x13B', '\x13C', '\x5', '\x36', 
		'\x1C', '\x2', '\x13C', '\x143', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13E', '\a', '(', '\x2', '\x2', '\x13E', '\x13F', '\x5', '&', '\x14', 
		'\x2', '\x13F', '\x140', '\a', '\x33', '\x2', '\x2', '\x140', '\x141', 
		'\x5', '\x36', '\x1C', '\x2', '\x141', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x133', '\x3', '\x2', '\x2', '\x2', '\x142', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x144', '\x148', '\a', '*', '\x2', 
		'\x2', '\x145', '\x147', '\x5', '\x6', '\x4', '\x2', '\x146', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x15', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', '\'', '\x2', 
		'\x2', '\x14C', '\x14D', '\a', '\x87', '\x2', '\x2', '\x14D', '\x14F', 
		'\a', '~', '\x2', '\x2', '\x14E', '\x150', '\x5', '\"', '\x12', '\x2', 
		'\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\a', '\x7F', '\x2', '\x2', '\x152', '\x153', '\x5', '\x4', '\x3', 
		'\x2', '\x153', '\x154', '\x5', ' ', '\x11', '\x2', '\x154', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x156', '\a', '-', '\x2', '\x2', '\x156', 
		'\x157', '\a', '\x87', '\x2', '\x2', '\x157', '\x158', '\a', '\x80', '\x2', 
		'\x2', '\x158', '\x159', '\x5', '&', '\x14', '\x2', '\x159', '\x15A', 
		'\a', 'R', '\x2', '\x2', '\x15A', '\x15B', '\x5', '&', '\x14', '\x2', 
		'\x15B', '\x15C', '\x5', '\x4', '\x3', '\x2', '\x15C', '\x15D', '\a', 
		'.', '\x2', '\x2', '\x15D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x15F', '\a', '/', '\x2', '\x2', '\x15F', '\x160', '\x5', '&', '\x14', 
		'\x2', '\x160', '\x161', '\x5', '\x4', '\x3', '\x2', '\x161', '\x162', 
		'\a', '\x30', '\x2', '\x2', '\x162', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\a', ',', '\x2', '\x2', '\x164', '\x165', '\a', '\x87', 
		'\x2', '\x2', '\x165', '\x167', '\a', '~', '\x2', '\x2', '\x166', '\x168', 
		'\x5', '$', '\x13', '\x2', '\x167', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16A', '\a', '\x7F', '\x2', '\x2', '\x16A', 
		'\x16B', '\x5', '\x4', '\x3', '\x2', '\x16B', '\x16C', '\a', ',', '\x2', 
		'\x2', '\x16C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', 
		'\a', '\x31', '\x2', '\x2', '\x16E', '\x174', '\x5', '\x36', '\x1C', '\x2', 
		'\x16F', '\x170', '\a', '\x32', '\x2', '\x2', '\x170', '\x174', '\x5', 
		'\x36', '\x1C', '\x2', '\x171', '\x172', '\a', '\x33', '\x2', '\x2', '\x172', 
		'\x174', '\x5', '\x36', '\x1C', '\x2', '\x173', '\x16D', '\x3', '\x2', 
		'\x2', '\x2', '\x173', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\a', '+', '\x2', '\x2', '\x176', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x177', '\x178', '\x5', '.', '\x18', '\x2', '\x178', '\x17F', 
		'\a', '\x87', '\x2', '\x2', '\x179', '\x17A', '\a', '\x81', '\x2', '\x2', 
		'\x17A', '\x17B', '\x5', '.', '\x18', '\x2', '\x17B', '\x17C', '\a', '\x87', 
		'\x2', '\x2', '\x17C', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '#', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', '\x189', '\x5', '&', '\x14', 
		'\x2', '\x183', '\x185', '\a', '\x81', '\x2', '\x2', '\x184', '\x186', 
		'\x5', '&', '\x14', '\x2', '\x185', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x183', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x189', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18A', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x18D', '\b', '\x14', '\x1', '\x2', '\x18D', '\x18E', '\a', 'v', '\x2', 
		'\x2', '\x18E', '\x1B1', '\x5', '&', '\x14', '\x16', '\x18F', '\x190', 
		'\a', '\x3', '\x2', '\x2', '\x190', '\x1B1', '\x5', '&', '\x14', '\x15', 
		'\x191', '\x1B1', '\a', '\x85', '\x2', '\x2', '\x192', '\x1B1', '\a', 
		'\x84', '\x2', '\x2', '\x193', '\x1B1', '\a', 'U', '\x2', '\x2', '\x194', 
		'\x196', '\x5', '\f', '\a', '\x2', '\x195', '\x197', '\x5', '\x30', '\x19', 
		'\x2', '\x196', '\x195', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x19A', '\x5', '*', '\x16', '\x2', '\x199', '\x19B', '\x5', 
		'\x30', '\x19', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x1B1', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19E', '\a', '\x87', '\x2', '\x2', '\x19D', '\x19F', 
		'\x5', '\x30', '\x19', '\x2', '\x19E', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x1A2', '\a', '\x8A', '\x2', '\x2', '\x1A1', 
		'\x1A3', '\x5', '\x30', '\x19', '\x2', '\x1A2', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', '~', '\x2', '\x2', 
		'\x1A5', '\x1A6', '\x5', '&', '\x14', '\x2', '\x1A6', '\x1A8', '\a', '\x7F', 
		'\x2', '\x2', '\x1A7', '\x1A9', '\x5', '\x30', '\x19', '\x2', '\x1A8', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', 
		'\a', '\x15', '\x2', '\x2', '\x1AB', '\x1AD', '\a', '~', '\x2', '\x2', 
		'\x1AC', '\x1AE', '\a', '\x8A', '\x2', '\x2', '\x1AD', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B1', '\a', '\x7F', '\x2', 
		'\x2', '\x1B0', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\x192', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x194', '\x3', '\x2', '\x2', '\x2', '\x1B0', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\f', 
		'\x14', '\x2', '\x2', '\x1B3', '\x1B4', '\a', 'q', '\x2', '\x2', '\x1B4', 
		'\x1CE', '\x5', '&', '\x14', '\x14', '\x1B5', '\x1B6', '\f', '\x13', '\x2', 
		'\x2', '\x1B6', '\x1B7', '\t', '\x2', '\x2', '\x2', '\x1B7', '\x1CE', 
		'\x5', '&', '\x14', '\x14', '\x1B8', '\x1B9', '\f', '\x12', '\x2', '\x2', 
		'\x1B9', '\x1BA', '\t', '\x3', '\x2', '\x2', '\x1BA', '\x1CE', '\x5', 
		'&', '\x14', '\x13', '\x1BB', '\x1BC', '\f', '\x11', '\x2', '\x2', '\x1BC', 
		'\x1BD', '\t', '\x4', '\x2', '\x2', '\x1BD', '\x1CE', '\x5', '&', '\x14', 
		'\x12', '\x1BE', '\x1BF', '\f', '\x10', '\x2', '\x2', '\x1BF', '\x1C0', 
		'\t', '\x5', '\x2', '\x2', '\x1C0', '\x1CE', '\x5', '&', '\x14', '\x11', 
		'\x1C1', '\x1C2', '\f', '\xF', '\x2', '\x2', '\x1C2', '\x1C3', '\a', 'l', 
		'\x2', '\x2', '\x1C3', '\x1CE', '\x5', '&', '\x14', '\x10', '\x1C4', '\x1C5', 
		'\f', '\xE', '\x2', '\x2', '\x1C5', '\x1C6', '\a', 'k', '\x2', '\x2', 
		'\x1C6', '\x1CE', '\x5', '&', '\x14', '\xF', '\x1C7', '\x1C8', '\f', '\r', 
		'\x2', '\x2', '\x1C8', '\x1C9', '\a', '#', '\x2', '\x2', '\x1C9', '\x1CE', 
		'\x5', '&', '\x14', '\xE', '\x1CA', '\x1CB', '\f', '\f', '\x2', '\x2', 
		'\x1CB', '\x1CC', '\a', '$', '\x2', '\x2', '\x1CC', '\x1CE', '\x5', '&', 
		'\x14', '\r', '\x1CD', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1CD', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D1', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D9', 
		'\a', '\x86', '\x2', '\x2', '\x1D3', '\x1D5', '\a', '\x86', '\x2', '\x2', 
		'\x1D4', '\x1D6', '\a', '\x8D', '\x2', '\x2', '\x1D5', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D7', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', ')', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC', '\x1DE', '\a', '|', '\x2', '\x2', '\x1DD', '\x1DF', 
		'\x5', '$', '\x13', '\x2', '\x1DE', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\a', '}', '\x2', '\x2', '\x1E1', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E4', '\a', '\x87', '\x2', 
		'\x2', '\x1E3', '\x1E5', '\x5', '\x30', '\x19', '\x2', '\x1E4', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', '\a', 
		'\x80', '\x2', '\x2', '\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EA', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1EB', '\x5', '&', '\x14', '\x2', '\x1EA', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EE', '\a', 
		'\x81', '\x2', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x1EF', '\x1F0', '\t', '\x6', '\x2', '\x2', '\x1F0', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '|', '\x2', '\x2', '\x1F2', 
		'\x1F3', '\x5', '&', '\x14', '\x2', '\x1F3', '\x1F4', '\a', '}', '\x2', 
		'\x2', '\x1F4', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1FB', '\a', '\x12', '\x2', '\x2', '\x1FA', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FE', '\x5', '&', '\x14', '\x2', 
		'\x1FD', '\x1FF', '\a', '\x12', '\x2', '\x2', '\x1FE', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1FA', '\x3', '\x2', '\x2', 
		'\x2', '\x201', '\x202', '\x3', '\x2', '\x2', '\x2', '\x202', '\x200', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x33', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\a', '\x88', 
		'\x2', '\x2', '\x205', '\x35', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', 
		'\a', '\x87', '\x2', '\x2', '\x207', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x209', '\a', '\x8D', '\x2', '\x2', '\x209', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ',', '?', '\x41', 'Q', 'U', '_', '\x64', 'j', '\xFA', 
		'\xFD', '\x10D', '\x113', '\x123', '\x127', '\x130', '\x142', '\x148', 
		'\x14F', '\x167', '\x173', '\x17F', '\x185', '\x189', '\x196', '\x19A', 
		'\x19E', '\x1A2', '\x1A8', '\x1AD', '\x1B0', '\x1CD', '\x1CF', '\x1D5', 
		'\x1D9', '\x1DE', '\x1E4', '\x1E7', '\x1EA', '\x1ED', '\x1F7', '\x1FA', 
		'\x1FE', '\x202',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
